// Script test n√¢ng cao cho Oracle gi√°
import { getTokenPriceFromChainlink as getTokenPriceFromOriginalOracle } from '../lib/blockchain/price-oracle';
import { getTokenPriceFromChainlink as getTokenPriceFromNewOracle } from '../services/blockchain/price-oracle-service';

// Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng Oracle m·ªõi hay kh√¥ng
const useNewOracle = process.argv.includes('--use-new-oracle');
const getTokenPriceFromChainlink = useNewOracle ? getTokenPriceFromNewOracle : getTokenPriceFromOriginalOracle;

// ƒê·∫£m b·∫£o s·ª≠ d·ª•ng c√°c RPC URLs t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
// Tr√≠ch xu·∫•t ETHEREUM_RPC_URL t·ª´ .env v√† ƒë·∫∑t n√≥ v√†o qu√° tr√¨nh
if (process.env.ETHEREUM_RPC_URL) {
  console.log(`T√¨m th·∫•y ETHEREUM_RPC_URL: ${process.env.ETHEREUM_RPC_URL.split(',').length} URL(s)`);
} else {
  console.log('Kh√¥ng t√¨m th·∫•y ETHEREUM_RPC_URL trong bi·∫øn m√¥i tr∆∞·ªùng');
}

console.log(`S·ª≠ d·ª•ng ${useNewOracle ? 'ORACLE M·ªöI' : 'Oracle c≈©'}`);
import axios from 'axios';

// ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
function formatPrice(price: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(price);
}

// ƒê·ªãnh d·∫°ng ph·∫ßn trƒÉm thay ƒë·ªïi
function formatChange(change: number): string {
  const sign = change >= 0 ? '+' : '';
  const color = change >= 0 ? '\x1b[32m' : '\x1b[31m'; // Xanh cho d∆∞∆°ng, ƒë·ªè cho √¢m
  return `${color}${sign}${change.toFixed(2)}%\x1b[0m`;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho k·∫øt qu·∫£ Oracle
interface TokenPriceResult {
  symbol: string;
  price: number;
  lastUpdated: string;
  source: string;
  change24h: number;
}

// L·∫•y gi√° th·ªã tr∆∞·ªùng t·ª´ CoinGecko API ƒë·ªÉ so s√°nh
async function getMarketPrice(symbol: string): Promise<number | null> {
  try {
    const coinGeckoIds: Record<string, string> = {
      'BTC': 'bitcoin',
      'ETH': 'ethereum',
      'USDT': 'tether',
    };
    
    const id = coinGeckoIds[symbol];
    if (!id) return null;
    
    const response = await axios.get(
      `https://api.coingecko.com/api/v3/simple/price?ids=${id}&vs_currencies=usd`,
      { timeout: 5000 }
    );
    
    if (response.data && response.data[id] && response.data[id].usd) {
      return response.data[id].usd;
    }
    
    return null;
  } catch (error) {
    console.error('Kh√¥ng th·ªÉ l·∫•y gi√° t·ª´ CoinGecko:', error);
    return null;
  }
}

/**
 * Test l·∫•y gi√° t·ª´ Oracle v√† so s√°nh v·ªõi th·ªã tr∆∞·ªùng
 */
async function testEnhancedOraclePrices() {
  console.log('\nüîç TEST N√ÇNG CAO ORACLE CUNG C·∫§P GI√Å\n');
  console.log('ƒêang ki·ªÉm tra k·∫øt n·ªëi v√† ƒë·ªô ch√≠nh x√°c c·ªßa Oracle...\n');
  
  const symbols = ['ETH', 'BTC', 'USDT'];
  const results: TokenPriceResult[] = [];
  const timings: Record<string, number> = {};
  const marketPrices: Record<string, number | null> = {};
  
  // L·∫•y gi√° th·ªã tr∆∞·ªùng song song ƒë·ªÉ so s√°nh
  console.log('‚öñÔ∏è ƒêang l·∫•y gi√° th·ªã tr∆∞·ªùng ƒë·ªÉ so s√°nh...');
  
  await Promise.all(
    symbols.map(async (symbol) => {
      marketPrices[symbol] = await getMarketPrice(symbol);
    })
  );
  
  // Th·ª±c hi·ªán test Oracle
  console.log('\n‚öôÔ∏è Kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn blockchain...\n');
  
  for (const symbol of symbols) {
    try {
      console.log(`‚è≥ ƒêang l·∫•y gi√° cho ${symbol}...`);
      const startTime = Date.now();
      
      const result = await getTokenPriceFromChainlink(symbol) as TokenPriceResult;
      
      const endTime = Date.now();
      timings[symbol] = endTime - startTime;
      
      results.push(result);
      
      // In th√¥ng tin gi√°
      console.log(`‚úÖ ${symbol}: ${formatPrice(result.price)} (${formatChange(result.change24h)})`);
      console.log(`   Ngu·ªìn: ${result.source}, Th·ªùi gian: ${timings[symbol]}ms`);
      console.log(`   C·∫≠p nh·∫≠t: ${new Date(result.lastUpdated).toLocaleString()}`);
      
      // So s√°nh v·ªõi gi√° th·ªã tr∆∞·ªùng
      if (marketPrices[symbol]) {
        const diff = ((result.price - marketPrices[symbol]!) / marketPrices[symbol]!) * 100;
        const diffStatus = Math.abs(diff) < 1 ? '‚úÖ Ch√≠nh x√°c' : Math.abs(diff) < 5 ? '‚ö†Ô∏è Kh√°c bi·ªát nh·ªè' : '‚ùå Kh√°c bi·ªát l·ªõn';
        
        console.log(`   Gi√° th·ªã tr∆∞·ªùng: ${formatPrice(marketPrices[symbol]!)}`);
        console.log(`   Ch√™nh l·ªách: ${diff > 0 ? '+' : ''}${diff.toFixed(2)}% ${diffStatus}`);
      }
      
      console.log('');
    } catch (error) {
      console.error(`‚ùå L·ªói khi l·∫•y gi√° cho ${symbol}:`, error);
    }
  }
  
  // T·ªïng k·∫øt
  console.log('\nüìä T·ªïng k·∫øt:');
  console.log(`- ƒê√£ ki·ªÉm tra ${results.length}/${symbols.length} token th√†nh c√¥ng`);
  console.log(`- Ngu·ªìn d·ªØ li·ªáu: ${results.filter(r => r.source === 'chainlink').length} t·ª´ Chainlink, ${results.filter(r => r.source === 'mock').length} t·ª´ d·ªØ li·ªáu gi·∫£`);
  
  // In th·ªùi gian truy v·∫•n
  console.log('\n‚è±Ô∏è Th·ªùi gian truy v·∫•n:');
  for (const symbol of symbols) {
    if (timings[symbol]) {
      const status = timings[symbol] > 3000 ? '‚ö†Ô∏è Ch·∫≠m' : '‚úÖ T·ªët';
      console.log(`- ${symbol}: ${timings[symbol]}ms ${status}`);
    }
  }
  
  // ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c
  console.log('\nüéØ ƒê·ªô ch√≠nh x√°c:');
  let accuracyCount = 0;
  
  for (const symbol of symbols) {
    const result = results.find(r => r.symbol === symbol);
    if (result && marketPrices[symbol]) {
      const diff = ((result.price - marketPrices[symbol]!) / marketPrices[symbol]!) * 100;
      let accuracyStatus = '';
      
      if (Math.abs(diff) < 1) {
        accuracyStatus = '\x1b[32mR·∫•t ch√≠nh x√°c\x1b[0m';
        accuracyCount++;
      } else if (Math.abs(diff) < 5) {
        accuracyStatus = '\x1b[33mCh·∫•p nh·∫≠n ƒë∆∞·ª£c\x1b[0m';
        accuracyCount += 0.5;
      } else {
        accuracyStatus = '\x1b[31mKh√¥ng ch√≠nh x√°c\x1b[0m';
      }
      
      console.log(`- ${symbol}: ${diff.toFixed(2)}% (${accuracyStatus})`);
    } else if (result && result.source === 'mock') {
      console.log(`- ${symbol}: \x1b[31mD·ªØ li·ªáu gi·∫£\x1b[0m`);
    }
  }
  
  const accuracyScore = (accuracyCount / symbols.length) * 100;
  console.log(`\nüìà ƒêi·ªÉm ƒë·ªô ch√≠nh x√°c: ${accuracyScore.toFixed(1)}%\n`);
  
  if (results.length === symbols.length && results.every(r => r.source === 'chainlink')) {
    console.log('\n‚úÖ T·∫•t c·∫£ c√°c token ƒë√£ ƒë∆∞·ª£c l·∫•y gi√° th√†nh c√¥ng t·ª´ Chainlink Oracle!\n');
  } else {
    console.log(`\n‚ö†Ô∏è Ch√∫ √Ω: ${symbols.length - results.filter(r => r.source === 'chainlink').length} tokens kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° t·ª´ Chainlink.\n`);
  }
}

// Ch·∫°y test
testEnhancedOraclePrices()
  .then(() => {
    console.log('üèÅ Test ho√†n t·∫•t.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Test th·∫•t b·∫°i:', error);
    process.exit(1);
  });
