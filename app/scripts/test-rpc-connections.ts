// Script ki·ªÉm tra ch·∫•t l∆∞·ª£ng k·∫øt n·ªëi RPC
import { ethers } from 'ethers';

// Danh s√°ch RPC URLs ƒë·ªÉ ki·ªÉm tra
const RPC_URLS = [
  "https://ethereum.publicnode.com",
  "https://rpc.ankr.com/eth",
  "https://eth-rpc.gateway.pokt.network",
  "https://1rpc.io/eth",
  "https://cloudflare-eth.com",
  "https://eth-mainnet.g.alchemy.com/v2/demo" // Alchemy demo key
];

// Th·ªùi gian timeout cho m·ªói y√™u c·∫ßu (ms)
const TIMEOUT = 5000;

// H√†m ki·ªÉm tra v√† ƒë√°nh gi√° k·∫øt n·ªëi
async function testRpcConnection(url: string): Promise<{
  url: string;
  success: boolean;
  latency?: number;
  blockNumber?: number;
  error?: string;
}> {
  console.log(`ƒêang ki·ªÉm tra: ${url}`);
  
  const startTime = Date.now();
  let success = false;
  let latency = 0;
  let blockNumber = 0;
  let error = '';
  
  try {
    // T·∫°o provider v·ªõi timeout
    const provider = new ethers.providers.JsonRpcProvider({
      url,
      timeout: TIMEOUT,
    });
    
    // Th·ª±c hi·ªán y√™u c·∫ßu ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
    const networkPromise = provider.getNetwork();
    const blockNumberPromise = provider.getBlockNumber();
    
    // Ch·ªù t·∫•t c·∫£ ho√†n th√†nh ho·∫∑c c√≥ l·ªói
    const [network, currentBlock] = await Promise.all([
      networkPromise,
      blockNumberPromise
    ]);
    
    latency = Date.now() - startTime;
    
    // X√°c ƒë·ªãnh k·∫øt qu·∫£
    success = true;
    blockNumber = currentBlock;
    
    console.log(`  ‚úì Th√†nh c√¥ng! M·∫°ng: ${network.name}, Block: ${currentBlock}, ƒê·ªô tr·ªÖ: ${latency}ms`);
    
  } catch (err: unknown) {
    latency = Date.now() - startTime;
    error = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    console.log(`  ‚úó L·ªói: ${error}, ƒê·ªô tr·ªÖ: ${latency}ms`);
  }
  
  return {
    url,
    success,
    latency,
    blockNumber,
    error: error || undefined
  };
}

// H√†m ch√≠nh
async function main() {
  console.log('\nüîç KI·ªÇM TRA K·∫æT N·ªêI RPC ETHEREUM\n');
  console.log(`Th·ªùi gian hi·ªán t·∫°i: ${new Date().toLocaleString()}`);
  console.log(`Th·ªùi gian timeout: ${TIMEOUT}ms`);
  console.log(`S·ªë l∆∞·ª£ng RPC c·∫ßn ki·ªÉm tra: ${RPC_URLS.length}`);
  console.log('\n---------------------------------\n');
  
  // T·ª™NG RPC URL ƒë∆∞·ª£c ki·ªÉm tra tu·∫ßn t·ª±
  const results = [];
  
  for (const url of RPC_URLS) {
    const result = await testRpcConnection(url);
    results.push(result);
    console.log(''); // Kho·∫£ng c√°ch gi·ªØa c√°c k·∫øt qu·∫£
  }
  
  // Th·ªëng k√™
  console.log('\n---------------------------------');
  console.log('\nüìä K·∫æT QU·∫¢ T·ªîNG H·ª¢P:\n');
  
  // S·ªë RPC th√†nh c√¥ng
  const successCount = results.filter(r => r.success).length;
  console.log(`- Th√†nh c√¥ng: ${successCount}/${results.length} RPC URLs (${Math.round(successCount/results.length*100)}%)`);
  
  // X·∫øp h·∫°ng RPC theo ƒë·ªô tr·ªÖ (ch·ªâ nh·ªØng c√°i th√†nh c√¥ng)
  const successfulResults = results.filter(r => r.success);
  successfulResults.sort((a, b) => (a.latency || Infinity) - (b.latency || Infinity));
  
  console.log('\nüèÜ X·∫æP H·∫†NG RPC URLS THEO ƒê·ªò TR·ªÑ:\n');
  successfulResults.forEach((result, index) => {
    console.log(`${index + 1}. ${result.url}`);
    console.log(`   ƒê·ªô tr·ªÖ: ${result.latency}ms, Block: ${result.blockNumber}`);
  });
  
  // G·ª£i √Ω c·∫•u h√¨nh t·ªët nh·∫•t cho .env
  if (successfulResults.length > 0) {
    console.log('\n‚ú® G·ª¢I √ù C·∫§U H√åNH CHO .ENV:\n');
    const bestRpcUrls = successfulResults.slice(0, 3).map(r => r.url);
    console.log(`ETHEREUM_RPC_URL="${bestRpcUrls.join(',')}"`);
    console.log('\nH√£y sao ch√©p d√≤ng tr√™n v√†o file .env c·ªßa b·∫°n ƒë·ªÉ c√≥ hi·ªáu su·∫•t Oracle t·ªët nh·∫•t.');
  } else {
    console.log('\n‚ùå Kh√¥ng c√≥ RPC URL n√†o k·∫øt n·ªëi th√†nh c√¥ng. H√£y ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.');
  }
}

// Ch·∫°y script
main()
  .then(() => {
    console.log('\n‚úÖ Ki·ªÉm tra ho√†n t·∫•t.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå ƒê√£ x·∫£y ra l·ªói:', error);
    process.exit(1);
  });
